package fillingAccountInfo

import Strings
import Strings.AccountInfo.ChooseProfessionalAreas
import Strings.AccountInfo.WriteOrganization
import Strings.AccountInfo.WriteProfession
import Strings.AccountInfo.WriteProfessionalActivity
import Strings.Question.ChooseQuestionArea
import auth.User
import com.ithersta.tgbotapi.fsm.builders.RoleFilterBuilder
import com.ithersta.tgbotapi.fsm.entities.triggers.onEnter
import com.ithersta.tgbotapi.fsm.entities.triggers.onText
import dev.inmo.tgbotapi.extensions.api.send.sendTextMessage
import dev.inmo.tgbotapi.types.UserId
import services.parsers.JsonParser
import states.*

val jsonParser: JsonParser = JsonParser()

fun RoleFilterBuilder<DialogState, User, User.Unauthenticated, UserId>.fillingAccountInfoFlow() {
    state<ChooseCountry> {
        onEnter {
            sendTextMessage(
                it,
                Strings.AccountInfo.ChooseCountry,
                replyMarkup = jsonParser.getCountries()
            )
        }
        onText("üá∑üá∫") { state.override { ChooseDistrict(county = "üá∑üá∫") } }
        onText("üá∞üáø") { state.override { ChooseCityInCIS(county = "üá∞üáø") } }
        onText("üá∫üáø") { state.override { ChooseCityInCIS(county = "üá∫üáø") } }
    }
    state<ChooseCityInCIS> {
        onEnter {
            sendTextMessage(
                it,
                Strings.AccountInfo.ChooseCity,
                replyMarkup = jsonParser.getCitiesFromCIS(state.snapshot.county)
            )
        }
        onText { message ->
            val city = message.content.text
            state.override { WriteProfessionState(city) }
        }
    }

    state<ChooseDistrict> {
        onEnter {
            sendTextMessage(
                it,
                Strings.AccountInfo.ChooseDistrict,
                replyMarkup = jsonParser.getDistricts()
            )
        }
        onText { message ->
            val district = message.content.text
            state.override { ChooseRegion(district) }
        }
    }
    state<ChooseRegion> {
        onEnter {
            sendTextMessage(
                it,
                Strings.AccountInfo.ChooseRegion,
                replyMarkup = jsonParser.getRegionsByDistrict(state.snapshot.district)
            )
        }
        onText { message ->
            val region = message.content.text
            state.override { ChooseCity(region) }
        }
    }
    state<ChooseCity> {
        onEnter {
            sendTextMessage(
                it,
                Strings.AccountInfo.ChooseCity,
                replyMarkup = jsonParser.getCitiesByRegion(state.snapshot.region)
            )
        }
        onText { message ->
            val city = message.content.text
            state.override { WriteProfessionState(city) }
        }
    }
    state<WriteProfessionState> {
        onEnter {
            sendTextMessage(
                it,
                WriteProfession
            )
        }
        onText {
            val profession = it.content.text // –º–± –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω—É–∂–Ω–∞ –∫–∞–∫–∞—è-–Ω–∏–±—É–¥—å?
            state.override { WriteOrganizationState(city, profession) }
        }
    }
    state<WriteOrganizationState> {
        onEnter {
            sendTextMessage(
                it,
                WriteOrganization
            )
        }
        onText {
            val organization = it.content.text // –º–± –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω—É–∂–Ω–∞ –∫–∞–∫–∞—è-–Ω–∏–±—É–¥—å?
            state.override { ChooseProfessionalAreasState(city, profession, organization) }
        }
    }
    state<ChooseProfessionalAreasState> {
        onEnter {
            sendTextMessage(
                it,
                ChooseProfessionalAreas
                // //TODO: –≥–¥–µ-—Ç–æ —Ç—É—Ç –≤–∏–¥–∏–º–æ –ø—Ä–∏–∫–æ–ª —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º –∏ –≤–∏–¥–∏–º–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
                // /!!!!–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ "–î—Ä—É–≥–æ–µ" –ø—Ä–æ—Å–∏—Ç –≤–≤–æ–¥–∞ –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –µ–≥–æ
            )
            // //–ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤—Å–µ –Ω—É–∂–Ω—ã–µ —Å—Ñ–µ—Ä—ã –≤—ã–±—Ä–∞–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            state.override {
                WriteProfessionalDescriptionState(
                    city,
                    profession,
                    organization,
                    emptyList()
                )
            } // –ø–æ–∫–∞ –ø—É—Å—Ç—å —ç–º–ø—Ç–∏ –±—É–¥–µ—Ç
        }
    }
    state<WriteProfessionalDescriptionState> {
        onEnter {
            sendTextMessage(
                it,
                WriteProfessionalActivity
            )
        }
        onText {
            val activity = it.content.text // –º–± –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω—É–∂–Ω–∞ –∫–∞–∫–∞—è-–Ω–∏–±—É–¥—å?
            state.override { ChooseQuestionAreasState(city, profession, organization, professionalAreas, activity) }
        }
    }
    state<ChooseQuestionAreasState> {
        onEnter {
            sendTextMessage(
                it,
                ChooseQuestionArea
                // /–Ω—É —Ç—É—Ç –≤–∏–¥–∏–º–æ –æ–ø—è—Ç—å –ø—Ä–∏–∫–æ–ª —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
            )
        }
        // /—Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        // /–Ω—É —è –¥—É–º–∞—é, –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—É–¥–µ—Ç —Å–æ–±–∏—Ä–∞—Ç—å –≤—Å–µ –Ω–æ–º–µ—Ä–∞ –≤ –ª–∏—Å—Ç, –∞ –ø–æ—Ç–æ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤ –±–∞–∑–µ –∏–º —à—Ç—É—á–∫–∏
    }
}
