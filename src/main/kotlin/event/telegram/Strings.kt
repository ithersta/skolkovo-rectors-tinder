package event.telegram

import dev.inmo.tgbotapi.utils.*
import event.domain.entities.Event
import kotlinx.datetime.*
import java.time.format.DateTimeFormatter

object Strings {
    private val midnight = LocalTime(0, 0)

    const val NoEvent = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"
    fun formatInstant(instant: Instant, timeZone: TimeZone): String {
        return if (instant.toLocalDateTime(timeZone).time == midnight) {
            val formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy")
            formatter.format(instant.toJavaInstant().atZone(timeZone.toJavaZoneId()))
        } else {
            val formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm")
            formatter.format(instant.toJavaInstant().atZone(timeZone.toJavaZoneId()))
        }
    }

    object ScheduleEvent {
        const val InputName = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
        const val InputBeginDateTime = "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏–ª–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º"
        const val InputEndDate = "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥"
        const val InputEndDateTime = "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º"
        const val InputDescription =
            "–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. " + "\n–ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –Ω–µ –∏–º–µ–µ—Ç—Å—è, –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É"
        const val NoDescription = "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
        const val InputUrl = "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"

        const val EventIsCreated = "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å ‚úÖ " +
            "\n–£—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏"

        const val EventNotCreated = "‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ"
        const val InvalidTimeInterval = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª"
        const val InvalidLink = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏"
        const val InvalidDataFormat = "–í–≤–µ–¥—ë–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. "
        fun approveEventMessage(event: Event, timeZone: TimeZone) = buildEntities {
            bold("–ù–∞–∑–≤–∞–Ω–∏–µ: ")
            regular(event.name.value)
            regularln("")
            val timeBegin = formatInstant(event.timestampBegin, timeZone)
            val timeEnd = formatInstant(event.timestampEnd, timeZone)
            val midnight = LocalTime(0, 0)
            if (event.timestampBegin.toLocalDateTime(timeZone).time == midnight &&
                event.timestampEnd.toLocalDateTime(timeZone).time == midnight
            ) {
                bold("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: ")
                regular(timeBegin)
                regularln("")
                bold("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ")
                regular(timeEnd)
            } else {
                bold("–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: ")
                regular(timeBegin)
                regularln("")
                bold("–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: ")
                regular(timeEnd)
            }
            if (event.description != null) {
                regularln("")
                bold("–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ")
                regular(event.description.value)
            }
            regularln("")
            bold("–°—Å—ã–ª–∫–∞: ")
            regular(event.url.value)
            regularln("")
            italicln("\n–í—Å–µ –≤–µ—Ä–Ω–æ?")
        }
    }

    object RemoveEvent {
        const val ChooseEvent = "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: "

        fun removeEventMessage(event: Event, timeZone: TimeZone) = buildEntities {
            addAll(eventInfo(event, timeZone))
            regular("–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?")
        }

        fun removedEventMessage(event: Event, timeZone: TimeZone) = buildEntities {
            addAll(eventInfo(event, timeZone))
            regular("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ ‚úÖ")
        }

        fun notRemovedEventMessage(event: Event, timeZone: TimeZone) = buildEntities {
            addAll(eventInfo(event, timeZone))
            regular("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ —É–¥–∞–ª–µ–Ω–æ")
        }
    }

    fun newEventMessage(event: Event, timeZone: TimeZone) = buildEntities {
        regular("üì® –ù–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ \n\n")
        addAll(eventInfo(event, timeZone))
    }

    fun eventInfo(event: Event, timeZone: TimeZone) = buildEntities {
        regular("üïì ")
        val timeBegin = formatInstant(event.timestampBegin, timeZone)
        val timeEnd = formatInstant(event.timestampEnd, timeZone)
        val beginLocalDateTime = event.timestampBegin.toLocalDateTime(timeZone)
        val endLocalDateTime = event.timestampBegin.toLocalDateTime(timeZone)
        if (beginLocalDateTime.time == midnight && endLocalDateTime.time == midnight) {
            regular(
                timeBegin +
                    " - " + timeEnd
            )
        } else if (beginLocalDateTime.date == endLocalDateTime.date) {
            regular(
                timeBegin +
                    " - " + timeEnd.toLocalDateTime().date
            )
        } else {
            regular(
                timeBegin +
                    " - " + timeEnd
            )
        }
        regularln("")
        boldln("üìÖ " + event.name.value)
        event.description?.let { italicln(it.value) }
        regular("üîó")
        link("–°—Å—ã–ª–∫–∞", event.url.value)
        regularln("\n")
    }
}
