package event.telegram

import dev.inmo.tgbotapi.utils.*
import event.domain.entities.Event

object Strings {
    object ScheduleEvent {
        const val InputName = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
        const val InputBeginDateTime = "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–ú–ú.–≥–≥–≥–≥ —á—á:–º–º"
        const val InputEndDateTime = "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–ú–ú.–≥–≥–≥–≥ —á—á:–º–º"
        const val InputDescription =
            "–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. " + "\n–ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –Ω–µ –∏–º–µ–µ—Ç—Å—è, –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É"
        const val NoDescription = "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
        const val InputUrl = "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"

        // TODO —Ç—É—Ç –ø—Ä–∏–¥—É–º–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        const val EventIsCreated = "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å ‚úÖ " +
            "–£—á–∞—Å—Ç–Ω–∏–∫–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏"

        const val EventNotCreated = "‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ"
        const val InvalidDataFormat = "–í–≤–µ–¥—ë–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. "
        fun message(event: Event) = buildEntities {
            bold("–ù–∞–∑–≤–∞–Ω–∏–µ: ")
            regular(event.name)
            regularln("")
            boldln("–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: ")
            regular(event.timestampBegin.toString())
            regularln("")
            boldln("–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: ")
            regular(event.timestampEnd.toString())
            if (event.description != null) {
                regularln("")
                boldln("–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ")
                event.description?.let { regular(it) }
            }
            regularln("")
            boldln("–°—Å—ã–ª–∫–∞: ")
            regular(event.url)
            regularln("")
            italicln("\n–í—Å–µ –≤–µ—Ä–Ω–æ?")
        }
    }

    object RemoveEvent {
        const val ChooseEvent = "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: "
        const val Remove = "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?"
        const val SuccessfulRemove = "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ ‚úÖ"
        const val NotRemove = "‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ —É–¥–∞–ª–µ–Ω–æ "
    }

    // TODO –ø—Ä–∏–¥—É–º–∞—Ç—å –∫–∞–∫ –≤—ã–≤–æ–¥–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è

    const val New = "üìÖ –ù–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ\n"
    fun eventMessage(event: Event) = buildEntities {
        bold(event.name)
        regularln("üïì ")
        regular(
            event.timestampBegin.toString() +
                " - " + event.timestampEnd.toString()
        )
        event.description?.let { regularln(it) }
        regularln("üîó")
        link("–ü–æ–¥—Ä–æ–±–Ω–µ–µ", event.url)
    }
}
